import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import {
  DollarSign,
  Package,
  ShoppingCart,
  Loader2,
  BarChart3,
  Users,
} from "lucide-react";
import SalesTable from "../components/sales/SalesTable";
import StatCard from "../components/sales/StatCard";
import EditSalesTransactionCard from "../components/sales/EditSalesTransactionCard";
import CreateSalesTransactionCard from "../components/sales/CreateSalesTransactionCard";
import { getSales, deleteSales } from "../api/salesApi";
import {
  deleteSale,
  fetchSalesFailure,
  fetchSalesStart,
  fetchSalesSuccess,
} from "../features/sales/SalesSlice";
import { aggregateSalesSummary } from "../utils/aggregateSalesSummary";

export default function Dashboard() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { loading, error, sales, isUpdated } = useSelector(
    (state) => state.sales
  );
  const { role, user } = useSelector((state) => state.auth);

  const [isEditOpen, setIsEditOpen] = useState(false);
  const [isCreateSaleOpen, setIsCreateSaleOpen] = useState(false);
  const [selectedSale, setSelectedSale] = useState(null);

  //Summary for manager
  const summary = aggregateSalesSummary(sales);

  const filteredSales =
    role === "rep" && user?._id
      ? sales.filter((s) => s.createdBy?._id === user._id)
      : sales;

  // Summary for Rep
  const mySummary = aggregateSalesSummary(filteredSales);

  useEffect(() => {
    const fetchData = async () => {
      dispatch(fetchSalesStart());
      try {
        const data = await getSales();
        if (data) {
          dispatch(fetchSalesSuccess(data.sales));
        }
      } catch (err) {
        dispatch(
          fetchSalesFailure(err.message || "Failed to fetch sales data")
        );
      }
    };
    fetchData();
  }, [isUpdated, user]);

  const handleEdit = (id) => {
    const sale = sales.find((s) => s._id === id);
    setSelectedSale(sale);
    setIsEditOpen(true);
  };

  const handleDelete = async (id) => {
    try {
      const data = await deleteSales(id);
      if (data) dispatch(deleteSale());
    } catch (err) {
      dispatch(fetchSalesFailure(err.message || "Failed to delete sale data"));
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="animate-spin h-10 w-10 text-gray-700" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center h-screen text-red-600 font-semibold">
        {error}
      </div>
    );
  }

  // Stat Card data - Manager
  const statCardsManager = [
    {
      title: "Total Sales",
      stats: summary.totalAmount,
      description: "Total revenue generated",
      icon: DollarSign,
      isQuantity: false,
    },
    {
      title: "Total Units Sold",
      stats: summary.totalUnits,
      description: "Total quantity sold",
      icon: Package,
      isQuantity: true,
    },
    {
      title: "Transactions",
      stats: summary.totalSales,
      description: "Number of sales transactions",
      icon: ShoppingCart,
      isQuantity: true,
    },
    {
      title: "Active Sales Reps",
      stats: summary.totalReps,
      description: "Currently active team members",
      icon: Users,
      isQuantity: true,
    },
  ];

  // Stat Card data - Rep
  const statCardsRep = [
    {
      title: "My Sales",
      stats: mySummary.totalAmount,
      description: "Revenue generated by me",
      icon: DollarSign,
      isQuantity: false,
    },
    {
      title: "Units Sold",
      stats: mySummary.totalUnits,
      description: "Products sold by me",
      icon: Package,
      isQuantity: true,
    },
    {
      title: "Transactions",
      stats: mySummary.totalSales,
      description: "My sales transactions",
      icon: ShoppingCart,
      isQuantity: true,
    },
  ];

  return (
    <div className="p-6 px-8 space-y-8">
      {/* Header */}
      <div className="flex justify-between">
        <h2 className="text-3xl font-bold">
          {role === "manager" ? "Manager Dashboard" : "Sales Dashboard"}
        </h2>
        {role === "manager" ? (
          <button
            onClick={() => navigate("/reports")}
            className="flex items-center px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800"
          >
            <BarChart3 className="h-4 w-4 mr-2" />
            View Reports
          </button>
        ) : (
          <button
            onClick={() => setIsCreateSaleOpen(true)}
            className="px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800"
          >
            New Sale
          </button>
        )}
      </div>
      {/* Dashboard Stat Cards */}
      <div
        className={`grid gap-6 ${
          role === "manager" ? "grid-cols-4" : "grid-cols-3"
        }`}
      >
        {(role === "manager" ? statCardsManager : statCardsRep).map((card) => (
          <StatCard key={card.title} {...card} />
        ))}
      </div>

      {/* Sales Table */}
      <div className="border border-gray-200 rounded-xl">
        <SalesTable
          data={sales}
          role={role}
          onEdit={handleEdit}
          onDelete={handleDelete}
        />
      </div>

      {/* Edit Sale Modal */}
      {isEditOpen && (
        <div className="fixed inset-0 bg-white/60 flex items-center justify-center z-50">
          <div className="relative w-full max-w-2xl">
            <EditSalesTransactionCard
              sale={selectedSale}
              onClose={() => setIsEditOpen(false)}
            />
          </div>
        </div>
      )}

      {/* Create Sale Modal */}
      {isCreateSaleOpen && (
        <div className="fixed inset-0 bg-white/60 flex items-center justify-center z-50">
          <div className="relative w-full max-w-2xl">
            <CreateSalesTransactionCard
              onClose={() => setIsCreateSaleOpen(false)}
            />
          </div>
        </div>
      )}
    </div>
  );
}
