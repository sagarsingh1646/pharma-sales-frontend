import { useEffect, useState } from "react";
import SalesTable from "../components/sales/SalesTable";
import StatCard from "../components/sales/StatCard";
import EditSalesTransactionCard from "../components/sales/EditSalesTransactionCard";
import { DollarSign, Package, ShoppingCart } from "lucide-react";
import { useDispatch, useSelector } from "react-redux";
import { deleteSales, getSales } from "../api/salesApi";
import {
  deleteSale,
  fetchSalesFailure,
  fetchSalesStart,
  fetchSalesSuccess,
} from "../features/sales/SalesSlice";
import CreateSalesTransactionCard from "../components/sales/CreateSalesTransactionCard";

export default function Dashboard() {
  const dispatch = useDispatch();
  const { loading, error, sales, isUpdated } = useSelector(
    (state) => state.sales
  );
  const { role } = useSelector((state) => state.auth);

  const [isEditOpen, setIsEditOpen] = useState(false);
  const [isCreateSaleOpen, setCreateSaleOpen] = useState(false);
  const [selectedSale, setSelectedSale] = useState(null);

  const statsData =
    role === "manager"
      ? [
          {
            title: "Total Sales",
            stats: 32500,
            description: "Total revenue generated",
            icon: DollarSign,
            isQuantity: false,
          },
          {
            title: "Total Units Sold",
            stats: 1200,
            description: "Total quantity sold this month",
            icon: Package,
            isQuantity: true,
          },
          {
            title: "Transactions",
            stats: 180,
            description: "Total number of transactions",
            icon: ShoppingCart,
            isQuantity: true,
          },
          {
            title: "Active Sales Reps",
            stats: 15,
            description: "Currently active team members",
            icon: ShoppingCart,
            isQuantity: true,
          },
        ]
      : [
          {
            title: "My Sales",
            stats: 9500,
            description: "Revenue generated by me",
            icon: DollarSign,
            isQuantity: false,
          },
          {
            title: "Units Sold",
            stats: 300,
            description: "Products sold this month",
            icon: Package,
            isQuantity: true,
          },
          {
            title: "Transactions",
            stats: 35,
            description: "Number of transactions",
            icon: ShoppingCart,
            isQuantity: true,
          },
        ];

  useEffect(() => {
    const fetchSalesData = async () => {
      dispatch(fetchSalesStart());
      try {
        const data = await getSales();
        console.log("data from dashboard", data);
        if (data) {
          dispatch(fetchSalesSuccess(data.sales));
        }
      } catch (err) {
        dispatch(
          fetchSalesFailure(err.message || "Failed to fetch sales data")
        );
      }
    };

    fetchSalesData();
  }, [isUpdated]);

  const handleEdit = (id) => {
    const sale = sales.find((s) => s._id === id);
    setSelectedSale(sale);
    setIsEditOpen(true);
  };

  const handleCreateSale = () => {
    setCreateSaleOpen(true);
  };

  const handleDelete = async (id) => {
    try {
      const data = await deleteSales(id);
      if (data) {
        dispatch(deleteSale());
      }
    } catch (error) {
      dispatch(updateSaleFailure(err.message || "Failed to delete sale data"));
    }
  };

  const closeEditModal = () => {
    setIsEditOpen(false);
    setSelectedSale(null);
  };

  const closeCreateSaleModal = () => {
    setCreateSaleOpen(false);
  };

  return (
    <div className="p-6 space-y-8">
      {/* Header */}
      <div className="flex justify-between">
        <h2 className="text-3xl font-bold">
          {role === "rep" ? "Sales Dashboard" : "Manager Dashboard"}
        </h2>
        <button onClick={handleCreateSale} className="px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800">
          New Sale
        </button>
      </div>

      {/* Dashboard Stat Cards */}
      <div
        className={`grid gap-6 ${
          role === "manager" ? "grid-cols-4" : "grid-cols-3"
        }`}
      >
        {statsData.map((card, index) => (
          <StatCard key={index} {...card} />
        ))}
      </div>

      {/* Sales Table */}
      <div className="border border-gray-200 rounded-xl">
        <SalesTable
          data={sales}
          role={role}
          onEdit={handleEdit}
          onDelete={handleDelete}
        />
      </div>

      {/* Edit Sale Modal */}
      {isEditOpen && (
        <div className="fixed inset-0 bg-white/60 flex items-center justify-center z-50">
          <div className="relative w-full max-w-2xl">
            <EditSalesTransactionCard
              sale={selectedSale}
              onClose={closeEditModal}
            />
          </div>
        </div>
      )}

      {/* Create Sale Modal */}
      {isCreateSaleOpen && (
        <div className="fixed inset-0 bg-white/60 flex items-center justify-center z-50">
          <div className="relative w-full max-w-2xl">
            <CreateSalesTransactionCard onClose={closeCreateSaleModal} />
          </div>
        </div>
      )}
    </div>
  );
}
